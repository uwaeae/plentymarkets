<?php

namespace Acme\BSDataBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ProductBundleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductBundleRepository extends EntityRepository
{

    public function clearBundle(Product $Product){

        $qb = $this->createQueryBuilder('b')
            ->where('b.Product = :p')
            ->setParameter('p', $Product)
            ->getQuery();

        $bundles = $qb->getResult();

        foreach($bundles as $item){
             $this->getEntityManager()->remove($item);
        }
        $Product->setProductBundle(array());
        $this->getEntityManager()->persist($Product);
        $this->getEntityManager()->flush();

    }

    public function getBundle(Product $Product){

        $qb = $this->createQueryBuilder('b')
            ->where('b.Product = :p')
            ->setParameter('p', $Product)
            ->getQuery();

        $bundles = $qb->getResult();
        $products = array();
        $repository = $this->getEntityManager()->getRepository('BSDataBundle:Product');
        foreach($bundles as $item){
            $p = $repository->findOneBy(array('article_id' => $item->getArticleID()));


            if($p){
                for($i=0;$i < $item->getQuantity();$i++){
                    $products[] = $p;
                }

            }else{
                throwException(new \Exception("Fehler in den Bundles"));
            }


        }

        return $products;
    }


    /**
     * Returns the class name of the object managed by the repository
     *
     * @return string
     */
    function getClassName()
    {
       return "ProductBundleRepository";
    }
}