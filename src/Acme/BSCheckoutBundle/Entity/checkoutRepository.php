<?php

namespace Acme\BSCheckoutBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * checkoutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class checkoutRepository extends EntityRepository
{

    public function getCurrentBaskets($cashbox_id){

        //
        $em = $this->getEntityManager();
        $cashbox = $em->getRepository('BSCheckoutBundle:cashbox')->find($cashbox_id);
        $qb = $this->createQueryBuilder('b');
        $qb->join('b.cashbox','c');
        $qb->where('b.finish <> true');
        $qb->andWhere($qb->expr()->eq('c.id',$cashbox_id));
        try{
            $result = $qb->getQuery()->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $result = null;
        }


        if(count($result) == 0 ){

            $c = new Checkout();
            //$c->setBuydate(new \DateTime());
            $c->setCashbox($cashbox);
            $c->setFinish(false);
            $c->setClosed(false);
            $c->setSummary(0);
            $c->setPayment(0);
            $this->getEntityManager()->persist($c);
            $this->getEntityManager()->flush();
            $result = array($c);
        }
        return $result;
    }
    public function getLastBasket($cashbox,$checkout){

        $qb = $this->createQueryBuilder('b');
        $qb->join('b.cashbox','c')
            ->where('b.finish = true')
            ->andWhere($qb->expr()->eq('c.id',$cashbox->getID()))
            ->andWhere($qb->expr()->neq('b.id',$checkout->getID()));
        if($checkout->getBuydate() == null){
            $qb->andWhere("b.buydate between '". date('Y-m-d 00:00:00')."' and '". date('Y-m-d H:i:s')."'");
        }else{
            $qb->andWhere("b.buydate between '". $checkout->getBuydate()->format('Y-m-d 00:00:00')."' and '". $checkout->getBuydate()->format('Y-m-d H:i:s')."'");
        }


            $qb->orderBy('b.buydate','DESC');
        try{
            $result = $qb->getQuery()->setMaxResults(1)->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $result = null;
        }
        return $result;
    }




    public function clearBasket($cashbox_id,$checkout){

        $em = $this->getEntityManager();
        $qb = $this->createQueryBuilder('b');
        $qb->where('b.id ='.$checkout);
        $qb->andWhere('b.cashbox ='.$cashbox_id);
        try{
            $cb = $qb->getQuery()->setMaxResults(1)->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $cb = null;
        }

        foreach($cb->getCheckoutItems() as $item){
            $em->remove($item);

        }

        $em->flush();
        return $cb;
    }


    public function getHistory($cashbox_id,$date,$closed = false){
        $d = strtotime($date);
        $d_beginn = date('YmdHis', mktime(0, 0, 0, date('m',$d), date('d',$d), date('Y',$d)));
        $d_end = date('YmdHis', mktime(0, 0, 0, date('m',$d), date('d',$d)+1, date('Y',$d)));

        $qb = $this->createQueryBuilder('b');
        $qb->where('b.finish = true');
        $qb->andWhere('b.cashbox ='.$cashbox_id);
        $qb->andWhere('b.buydate BETWEEN '.$d_beginn.' AND '.$d_end);
        $qb->andWhere($qb->expr()->eq('b.closed', ($closed === true? 1 : 0)));

        try{
            $result = $qb->getQuery()->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $result = null;
        }

        return $result;


    }

    /**
     * Returns the class name of the object managed by the repository
     *
     * @return string
     */
    function getClassName()
    {
       return 'checkoutRepository';
    }
}