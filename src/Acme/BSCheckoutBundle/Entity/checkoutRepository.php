<?php

namespace Acme\BSCheckoutBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * checkoutRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class checkoutRepository extends EntityRepository
{

    public function getCurrentBasket($cashbox_id){

        //
        $em = $this->getEntityManager();
        $cashbox = $em->getRepository('BSCheckoutBundle:cashbox')->find($cashbox_id);
        $qb = $this->createQueryBuilder('b');
        $qb->join('b.cashbox','c');
        $qb->where('b.finish <> true');
        $qb->andWhere($qb->expr()->eq('c.id',$cashbox_id));
        try{
            $result = $qb->getQuery()->setMaxResults(1)->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $result = null;
        }


        if(!$result){
            $result = new Checkout();
            $result->setBuydate(new \DateTime());
            $result->setCashbox($cashbox);
            $result->setFinish(false);
            $result->setClosed(false);
            $result->setSummary(0);
            $result->setPayment(0);
            $this->getEntityManager()->persist($result);
            $this->getEntityManager()->flush();
        }
        return $result;
    }

    public function clearCurrentBasket($cashbox_id){

        $em = $this->getEntityManager();
        $qb = $this->createQueryBuilder('b');
        $qb->where('b.finish <> true');
        $qb->andWhere('b.cashbox ='.$cashbox_id);
        try{
            $cb = $qb->getQuery()->setMaxResults(1)->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $cb = null;
        }

        foreach($cb->getCheckoutItems() as $item){
            $em->remove($item);

        }

        $em->flush();
        return $cb;
    }


    public function getHistory($cashbox_id,$date,$closed = false){
        $d = strtotime($date);
        $d_beginn = date('YmdHis', mktime(0, 0, 0, date('m',$d), date('d',$d), date('Y',$d)));
        $d_end = date('YmdHis', mktime(0, 0, 0, date('m',$d), date('d',$d)+1, date('Y',$d)));

        $qb = $this->createQueryBuilder('b');
        $qb->where('b.finish = true');
        $qb->andWhere('b.cashbox ='.$cashbox_id);
        $qb->andWhere('b.buydate BETWEEN '.$d_beginn.' AND '.$d_end);
        $qb->andWhere($qb->expr()->eq('b.closed', ($closed === true? 1 : 0)));

        try{
            $result = $qb->getQuery()->getResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $result = null;
        }

        return $result;


    }

    /**
     * Returns the class name of the object managed by the repository
     *
     * @return string
     */
    function getClassName()
    {
       return 'checkoutRepository';
    }
}