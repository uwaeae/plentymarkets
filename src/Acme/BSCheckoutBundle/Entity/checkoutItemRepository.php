<?php

namespace Acme\BSCheckoutBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * checkoutItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class checkoutItemRepository extends EntityRepository
{


    public function addItem($basket,$code,$price = 0,$quantity = 1,$name = null){

        $em = $this->getEntityManager();
        /*
        $qb = $this->createQueryBuilder('i');
        $qb->where('i.checkout = ?1');
        $qb->setParameter(1,$basket);
        $qb->andWhere('i.articleCode like ?2');
        $qb->setParameter(2,$code.'%');
        try{
            $item = $qb->getQuery()->setMaxResults(1)->getSingleResult();
        } catch (\Doctrine\Orm\NoResultException $e) {
            $item = null;

        }


        if(!$item){
            */
            $qb = $em->createQueryBuilder();
            $qb->add('select', 'p')
                ->add('from', 'BSDataBundle:Product p');




        if(strlen($code) == 13 ){
            $qb
                ->add('where',
                    $qb->expr()->like('p.EAN', '?1')
                )->setParameter('1', $code);
        }elseif(strlen($code) === 8 && is_numeric($code) ){
            $artikel_id = substr($code,0,7);
            $qb
                ->add('where',
                    $qb->expr()->like('p.article_id', '?1')
                )->setParameter('1', intval($artikel_id));
        }else{
            $qb
                ->add('where',
                    $qb->expr()->like('p.article_no', '?1')
                )->setParameter('1', $code.'%');
        }

            try{
                $product =  $qb->getQuery()->setMaxResults(1)->getSingleResult();
            } catch (\Doctrine\Orm\NoResultException $e) {
                $product = null;

            }
            if($product){
                $co_item = new \Acme\BSCheckoutBundle\Entity\checkoutItem();
                $co_item->setArticleCode($product->getArticleNo());
                $co_item->setArticleId($product->getArticleId());
                $co_item->setCheckout($basket);
                $co_item->setDescription(is_null($name)  ? $product->getName().' '.$product->getName2():$name);
                //if(!$price)  $co_item->setPrice($product->getPrice6());
                //else $co_item->setPrice($price);
                //$co_item->setPrice(is_null($price) || $price == 0 ? $product->getPrice6() : $price);
                $co_item->setPrice($price);
                $co_item->setVAT($product->getVAT());
                $co_item->setQuantity($quantity);
                $em->persist($co_item);

            }

        //}else{
        //    $item->setQuantity($item->getQuantity() + 1 );
        //    $em->persist($item);
        //}

        $em->flush();


    }

    /**
     * Returns the class name of the object managed by the repository
     *
     * @return string
     */
    function getClassName()
    {
        // TODO: Implement getClassName() method.
    }
}